#include "tree.h"

#include <cassert>

int main() {
 tree_t tree(3);
   tree.set(1, 42);
  auto v = tree.get(1);
  assert(v == 42);
  tree.remove(1);
  tree.set(2,7);
  tree.set(3,9);
  tree.set(6,8);
  tree.set(7,13);
  tree.set(9,212);
  tree.remove(9);
  auto vv=tree.get(2);
  assert(vv==7);

  tree_t tree2(3);
  tree2.set(1,12);
  tree2.set(2,13);
//  node_t* node1=tree2.find_leaf(1);
//  node_t* node2=tree2.find_leaf(2);
 // std::tuple node3(3,node1,node2);
  tree2.set(4,6);
  //tree2.insert(node3);
  auto v2=tree2.get(4);
  assert(v2==6);

  tree_t tree3(3);
    tree3.set(1,12);
    tree3.set(2,13);
    tree3.remove(2);
    tree3.remove(1);
    tree3.set(2,14);
    auto v3=tree3.get(2);
    assert(v3==14);

    tree_t tree4(4);
    tree4.set(1,13);
    tree4.set(2,15);
    tree4.set(3,12);
    tree4.set(4,16);
    tree4.set(5,18);
    tree4.set(6,19);
    tree4.remove(19);
    tree4.remove(6);
    tree4.set(7,9);tree4.set(1,13);
    tree4.set(8,15);
    tree4.set(9,12);
    tree4.set(11,16);
    tree4.set(10,18);
    tree4.set(12,19);
    tree4.set(14,19);
    tree4.set(16,18);
    tree4.set(17,19);
    tree4.set(19,19);
    auto v4=tree4.get(9);
    assert(v4==12);

  return 0;
}
